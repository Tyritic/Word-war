#include"Item.h"
#include"Map.h"
#include"Music.h"
using namespace std;

void printMap(string map[][65])
{

    for (int i = 1; i <= 35; ++i)
    {
        for (int j = 0; j < 65; ++j)
        {
            if (map[i][j] == "Ò»")
            {
                std::printf("%s", "  ");
                //cout << "  ";
                continue;
            }
            std::printf("%s", map[i][j].c_str());
            //cout << map[i][j];
        }
        if (i == 35)break;
        std::printf("\n");

    }
}
void printMapFast(string map[][65])
{
    for (int i = 1; i <= 35; ++i)
    {
        for (int j = 0; j < 65; ++j)
        {
            if (map[i][j] == "Âò") { gotoxy(2 * j, i + 4); printf("Âò"); }
            else if (map[i][j] == "ÃÅ") { gotoxy(2 * j, i + 4); printf("ÃÅ"); }
            else if (map[i][j] == "ÎÒ") { gotoxy(2 * j, i + 4); printf("ÎÒ"); }
        }
    }
}
void printMapFight(string map[][65], Bin b[], Zu z[], Di d[], Wang w[], Huang h[], Buttet buttet[], emenyButtet emenybuttet[])
{

    for (int i = 1; i <= 35; ++i)
    {
        for (int j = 0; j < 65; ++j)
        {
            if (map[i][j] == "Ò»")
            {
                std::printf("%s", "  ");
                continue;
            }
            else if (map[i][j] == "¶´") { SetColor(6); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "Ò©") { SetColor(10); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "³å") { SetColor(13); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "»÷") { SetColor(13); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "²¨") { SetColor(13); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "¹â") { SetColor(13); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "´Ì") { SetColor(11); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "ÅÚ") { SetColor(13); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "Ïä") {
                SetColor(6); std::printf("%s", map[i][j].c_str()); SetColor(); continue;
            }
            else if (map[i][j] == "»ð") {
                SetColor(12); std::printf("%s", map[i][j].c_str()); SetColor(); continue;
            }
            for (int k = 0; k < emenyButtet::num; ++k) { if (i == emenybuttet[k].hang && j == emenybuttet[k].lie && emenybuttet[k].alive == 1) { SetColor(14); "%s", std::printf(map[i][j].c_str()); SetColor(); goto A; } }
            for (int k = 0; k < Buttet::num; ++k) { if (i == buttet[k].hang && j == buttet[k].lie && buttet[k].alive == 1) { SetColor(13); "%s", std::printf(map[i][j].c_str()); SetColor(); goto A; } }
            for (int k = 0; k < Bin::num; ++k) { if (b[k].alive == 1 && i == b[k].hang && j == b[k].lie) { SetColor(b[k].Hp); "%s", std::printf(map[i][j].c_str()); SetColor(); goto A; } }
            for (int k = 0; k < Zu::num; ++k) {
                if (z[k].alive == 1 && i == z[k].hang && j == z[k].lie) {
                    SetColor(z[k].Hp); "%s", std::printf(map[i][j].c_str()); SetColor(); goto A;
                }
            }
            for (int k = 0; k < Di::num; ++k)
            {
                if (d[k].alive == 1 && i == d[k].hang && j == d[k].lie) {
                    SetColor(d[k].Hp); "%s", std::printf(map[i][j].c_str()); SetColor(); goto A;
                }
            }
            for (int k = 0; k < Wang::num; ++k) {
                if (w[k].alive == 1 && i == w[k].hang && j == w[k].lie) {
                    SetColor(w[k].Hp); "%s", std::printf(map[i][j].c_str()); SetColor(); goto A;
                }
            }
            for (int k = 0; k < Huang::num; ++k) {
                if (h[k].alive == 1 && i == h[k].hang && j == h[k].lie) {
                    SetColor(5); "%s", std::printf(map[i][j].c_str()); SetColor(); goto A;
                }
            }

            std::printf("%s", map[i][j].c_str());
        A:;
        }
        if (i == 35)break;
        std::printf("\n");
    }

}
void printMapFightFast(string map[][65], Bin b[], Zu z[], Di d[], Wang w[], Huang h[], Buttet buttet[], emenyButtet emenybuttet[])
{
    for (int i = 1; i <= 35; ++i)
    {
        for (int j = 0; j < 65; ++j)
        {
            //for (int k = 0; k < emenyButtet::num; ++k) { if (i == emenybuttet[k].hang && j == emenybuttet[k].lie && emenybuttet[k].alive == 1) { SetColor(14); gotoxy(2 * j, i + 4); std::printf(map[i][j].c_str()); SetColor(); goto A; } }
            //for (int k = 0; k < Buttet::num; ++k) { if (i == buttet[k].hang && j == buttet[k].lie && buttet[k].alive == 1) { SetColor(13); gotoxy(2 * j, i + 4); std::printf(map[i][j].c_str()); SetColor(); goto A; } }
            if (map[i][j] == "¶´") { SetColor(6); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "»ð") { SetColor(12); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "´Ì") { SetColor(11); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "Ïä") { SetColor(6); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "Ò©") { SetColor(10); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "ÅÚ") { SetColor(13); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "³å") { SetColor(13); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "»÷") { SetColor(13); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "²¨") { SetColor(13); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "¹â") { SetColor(13); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            for (int k = 0; k < Bin::num; ++k) { if (b[k].alive == 1 && i == b[k].hang && j == b[k].lie) { SetColor(b[k].Hp); gotoxy(2 * j, i + 4); std::printf(map[i][j].c_str()); SetColor(); goto A; } }
            for (int k = 0; k < Zu::num; ++k) {
                if (z[k].alive == 1 && i == z[k].hang && j == z[k].lie) {
                    SetColor(z[k].Hp); gotoxy(2 * j, i + 4); std::printf(map[i][j].c_str()); SetColor(); goto A;
                }
            }
            for (int k = 0; k < Di::num; ++k)
            {
                if (d[k].alive == 1 && i == d[k].hang && j == d[k].lie) {
                    SetColor(d[k].Hp); gotoxy(2 * j, i + 4); std::printf(map[i][j].c_str()); SetColor(); goto A;
                }
            }
            for (int k = 0; k < Wang::num; ++k) {
                if (w[k].alive == 1 && i == w[k].hang && j == w[k].lie) {
                    SetColor(w[k].Hp); gotoxy(2 * j, i + 4); std::printf(map[i][j].c_str()); SetColor(); goto A;
                }
            }
            for (int k = 0; k < Huang::num; ++k) {
                if (h[k].alive == 1 && i == h[k].hang && j == h[k].lie) {
                    SetColor(5); gotoxy(2 * j, i + 4); std::printf(map[i][j].c_str()); SetColor(); goto A;
                }
            }
            if (map[i][j] == "ÎÒ") { gotoxy(2 * j, i + 4); printf(map[i][j].c_str()); }
        A:;
        }

    }
}
void printMapMultiplayer(string map[][65], person& p, person& p2, Buttet buttet[], Buttet02 buttet02[], Wave wave[], Wave02 wave02[])
{
    for (int i = 1; i <= 35; ++i)
    {
        for (int j = 0; j < 65; ++j)
        {
            if (map[i][j] == "Ò»")
            {
                std::printf("%s", "  ");
                continue;
            }
            else if (map[i][j] == "³å") { SetColor(13); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "»÷") { SetColor(13); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "²¨") { SetColor(13); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "´Ì") { SetColor(11); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "Ïä") {
                SetColor(6); std::printf("%s", map[i][j].c_str()); SetColor(); continue;
            }
            else if (map[i][j] == "»ð") {
                SetColor(12); std::printf("%s", map[i][j].c_str()); SetColor(); continue;
            }
            std::printf("%s", map[i][j].c_str());
        A:;
        }
        if (i == 35)break;
        std::printf("\n");
    }
}
void printMapMultiplayerFast(string map[][65], person& p, person& p2, Buttet buttet[], Buttet02 buttet02[], Wave wave[], Wave02 wave02[])
{
    for (int i = 1; i <= 35; ++i)
    {
        for (int j = 0; j < 65; ++j)
        {
            //for (int k = 0; k < emenyButtet::num; ++k) { if (i == emenybuttet[k].hang && j == emenybuttet[k].lie && emenybuttet[k].alive == 1) { SetColor(14); gotoxy(2 * j, i + 4); std::printf(map[i][j].c_str()); SetColor(); goto A; } }
            //for (int k = 0; k < Buttet::num; ++k) { if (i == buttet[k].hang && j == buttet[k].lie && buttet[k].alive == 1) { SetColor(13); gotoxy(2 * j, i + 4); std::printf(map[i][j].c_str()); SetColor(); goto A; } }
            if (map[i][j] == "»ð") { SetColor(12); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "´Ì") { SetColor(11); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "Ïä") { SetColor(6); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "³å") { SetColor(13); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "»÷") { SetColor(13); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            else if (map[i][j] == "²¨") { SetColor(13); gotoxy(2 * j, i + 4); std::printf("%s", map[i][j].c_str()); SetColor(); continue; }
            if (map[i][j] == "ÎÒ") { gotoxy(2 * j, i + 4); printf(map[i][j].c_str()); }
            if (map[i][j] == "Ëû") { gotoxy(2 * j, i + 4); printf(map[i][j].c_str()); }
        A:;
        }

    }
}
void Printstate(person A, int level)
{
    cout << "+--------------------------------------------------------------------------------------------------------------------------------+" << endl;
    cout << "|HP£º  " << left << setw(3) << A.Hp << "/" << left << setw(6) << A.limit << right << setw(9) << "µ±Ç°ÎäÆ÷£º" << A.weaponChange(A.weaponUsing) << setw(10) << "£¨°´RÇÐ»»£©" << right << setw(10) << "ÎäÆ÷²Û£º" << A.weaponChange(A.weapon01) << "," << A.weaponChange(A.weapon02) << setw(10) << "¼¼ÄÜ£º" << A.skillChange(A.skill);
    if (A.Cd > 0 && A.skill != 0)
    {
        cout << "£¨°´¿Õ¸ñÊÍ·Å£©£º" << "£¨ÀëÏÂÒ»´Î¼¼ÄÜÊÍ·Å»¹Ðè"
            << setw(2) << A.Cd << "Ãë£©" << setw(6) << "|" << endl;
    }
    else if (A.Cd <= 0 && A.skill != 0)
    {
        cout << "£¨°´¿Õ¸ñÊÍ·Å¼¼ÄÜ£©" << "                               |" << endl;
    }
    else cout << "                                                 |" << endl;
    cout << "|µÃ·Ö£º" << left << setw(10) << A.score << "µÈ¼¶£º" << setw(21) << A.level << left << setw(7) << "½ðÇ®£º" << setw(14) << A.money << left << setw(10);
    if (level != 0 && level != -1)cout << "Ê£Óà»÷É±Êý£º" << setw(3) << A.needKill_kill - A.kill << right << setw(50) << "|" << endl;
    else cout << "                                                                |" << endl;;
    cout << "+--------------------------------------------------------------------------------------------------------------------------------+" << endl;
}
void PrintHp(const person& p)
{
    SetColor(4);
    for (int i = 1; i <= p.Hp; ++i)
    {
        std::printf("ÑªÁ¿");
    }SetColor();
    for (int i = p.Hp * 2 + 1; i <= 65; ++i)
    {
        std::printf("  ");
    }
    std::printf("\n");

}
void printWin()
{
    StopStageModeBossBGM();
    PlayWinBGM();
    system("cls");
    gotoxy(0, 17);
    cout << "                                  ×îÖÕ£¬ÄãÀ´µ½ÁËÒ»×ù¹ÅÀÏµÄµØ±¤£¬·¢ÏÖÎÄ×ÖÖ®ÍõÒÑ¾­µÈºò¶àÊ±¡£" << endl; Sleep(2000);
    cout << "                         ÔÚÓëÎÄ×ÖÖ®ÍõµÄ½»Ì¸ÖÐ£¬ÄãÑ§»áÁËÈçºÎ´´ÔìÒ»¸ö¿ÉÒÔÈÃÈËÃÇºÍÆ½¹²´¦µÄÊÀ½çµÄ·½·¨¡£" << endl; Sleep(2000);
    cout << "                 »Øµ½´óÂ½µÄÁíÒ»¶Ë£¬ÄãÓÃÎÄ×ÖÖ®Íõ½Ì¸øÄãµÄ·½·¨£¬ÈÃËùÓÐÈË¶¼Ñ§»áÁËÊ¹ÓÃÎÄ×Ö£¬²¢´´ÔìÁËÒ»¸öºÍÆ½¹²´¦µÄÊÀ½ç¡£" << endl; Sleep(2000);
    cout << "                           Äã³ÉÎªÁËÒ»¸öÓ¢ÐÛ£¬±»ÈËÃÇÃú¼ÇÔÚÐÄÖÐ£¬¶øÕâ¸ö¹ÅÀÏµÄÊÀ½çÒ²ÒòÎªÄã¶ø±äµÃ¸ü¼ÓÃÀºÃ¡£" << endl; cout << endl << endl; Sleep(2000);
    cout << "                                                          °´P¼ü»Øµ½´å×¯ ";
    while (1) {
        if (GetAsyncKeyState('P')) { StopWinBGM(); PlayTownAndShopBGM(); break; }
    }

}
void printHuangHp(const Huang h[])
{
    std::printf("\n");
    SetColor(5);
    for (int i = 1; i <= h[0].Hp; ++i)
    {
        std::printf("Ñª");
    }SetColor();
    for (int i = h[0].Hp + 1; i <= 65; ++i)
    {
        std::printf("  ");
    }
}
void printStateEndless(person& p, int level)
{
    cout << "+--------------------------------------------------------------------------------------------------------------------------------+" << endl;
    cout << "|HP£º  " << left << setw(3) << p.Hp << "/" << left << setw(6) << p.limit << right << setw(9) << "µ±Ç°ÎäÆ÷£º" << p.weaponChange(p.weaponUsing) << setw(10) << "£¨°´RÇÐ»»£©"
        << right << setw(10) << "ÎäÆ÷²Û£º" << p.weaponChange(p.weapon01) << "," << p.weaponChange(p.weapon02) << setw(10) << "¼¼ÄÜ£º" << p.skillChange(p.skill);
    if (p.Cd > 0 && p.skill != 0)
    {
        cout << "£¨°´¿Õ¸ñÊÍ·Å£©£º" << "£¨ÀëÏÂÒ»´Î¼¼ÄÜÊÍ·Å»¹Ðè"
            << setw(2) << p.Cd << "Ãë£©" << setw(6) << "|" << endl;
    }
    else if (p.Cd <= 0 && p.skill != 0)
    {
        cout << "£¨°´¿Õ¸ñÊÍ·Å¼¼ÄÜ£©" << "                               |" << endl;
    }
    else cout << "                                                 |" << endl;
    cout << "|µÃ·Ö£º" << left << setw(10) << p.score << "µÈ¼¶£º" << setw(21) << p.level << left << setw(7) << "½ðÇ®£º" << setw(14) << p.money << "×î¸ß·Ö£º" << setw(14) << p.hightest_score << right << setw(43) << "|" << endl;
    cout << "+--------------------------------------------------------------------------------------------------------------------------------+" << endl;
}
void printStatemultiplayer(person A, person B, int level)
{
    cout << "                                 +----------------------------------------------------------------------------------+" << endl;
    cout << "                                 |Íæ¼ÒÒ» HP£º  " << left << setw(3) << A.Hp << "/" << left << setw(6) << 10 << right << setw(9) << "µ±Ç°ÎäÆ÷£º" << A.weaponChange(A.weaponUsing) << setw(8) << "£¨°´EÇÐ»»£©"
        << right << setw(10) << "ÎäÆ÷²Û£º" << A.weaponChange(A.weapon01) << "," << A.weaponChange(A.weapon02) << setw(16) << "|" << endl;
    cout << "                                 |Íæ¼Ò¶þ HP£º  " << left << setw(3) << B.Hp << "/" << left << setw(6) << 10 << right << setw(9) << "µ±Ç°ÎäÆ÷£º" << B.weaponChange(B.weaponUsing) << setw(8) << "£¨°´6ÇÐ»»£©"
        << right << setw(10) << "ÎäÆ÷²Û£º" << B.weaponChange(B.weapon01) << "," << B.weaponChange(B.weapon02) << setw(16) << "|" << endl;
    cout << "                                 +----------------------------------------------------------------------------------+" << endl;
}
void printIntroduction()
{
    cout << "ÄãÀ´µ½ÁËÒ»¸ö³äÂúÎÄ×ÖµÄÊÀ½ç£¬ÑÛÇ°³öÏÖµÄÊÇÒ»¸ö¹ÅÀÏµÄ´å×¯£¬"
        << "´å×ÓÒ»Ö±¿Ú¿ÚÏà´«Ò»¸ö¹ÅÀÏµÄ´«Ëµ£º´«ËµÖÐÓÐÒ»¸ö½Ð×ö¡°ÎÄ×ÖÖ®Íõ¡±µÄÈË£¬"
        << "ËûÕÆÎÕÁËËùÓÐµÄÎÄ×Ö£¬²¢¿ÉÒÔÈÃÈËÃÇÊ¹ÓÃÕâÐ©ÎÄ×ÖÀ´´´ÔìÒ»¸öÃÀºÃµÄÊÀ½ç¡£"
        << "ÓÚÊÇ£¬Äã¾ö¶¨Ç°Íù´óÂ½µÄÁíÒ»¶Ë£¬È¥Ñ°ÕÒÕâ¸öÎÄ×ÖÖ®Íõ¡£"
        << "¸ù¾Ý´åÀïÀÏÈËµÄÖ¸Òý£¬ÄãÀ´µ½ÁË´å×ÓÀïµÄÈë¿Ú¡£Äã¾ªÆæµØ·¢ÏÖ´å×ÓÀïµÄÈë¿ÚÍ¨ÏòÒ»¸öµØÀÎ¡£"
        << "ÔÚÂÃÍ¾ÖÐ£¬Äã½«Óöµ½¸÷ÖÖ¸÷ÑùµÄÌôÕ½ºÍÕÏ°­£¬±ÈÈçÒª±Ü¿ªÎ£ÏÕµÄÏÝÚå£¬»¹ÒªÓëÐ°¶ñµÄµÐÈË½øÐÐÕ½¶·¡£"
        << "µ«Äã¿ÉÒÔÍ¨¹ýÓëµÐÈËµÄÕ½¶·À´»ñÈ¡ÐÂµÄÎäÆ÷ºÍ¼¼ÄÜ";
    cout << endl; cout << endl;
    SetColor(13);
    cout << "µ¥ÈËÄ£Ê½ÓÎÏ·¼üÎ»½éÉÜ£º" << endl;
    SetColor(7);
    cout << "1.WASD£ºÓÃÓÚ¿ØÖÆ½ÇÉ«ÒÆ¶¯" << endl;
    cout << "2.·½Ïò¼ü£ºÓÃÓÚ¿ØÖÆ½ÇÉ«µÄÉä»÷" << endl;
    cout << "3.R¼ü£ºÇÐ»»½ÇÉ«×°±¸" << endl;
    cout << "4.¿Õ¸ñ¼ü:ÊÍ·Å¼¼ÄÜ" << endl;
    SetColor(12);
    cout << "µÐÈË½éÉÜ£º";
    SetColor(7);
    cout << "µÐÈËµÄÑÕÉ«´ú±íËüÄ¿Ç°µÄÉúÃüÖµ,ÉúÃüÖµµÄÑÕÉ«´ÓµÍµ½¸ßÎª£º";
    for (int i = 1; i <= 10; i++)
    {
        SetColor(i);
        cout << i << " ";
    }
    SetColor(7);
    cout << endl;
    cout << "1.±ø£º×îÆÕÍ¨µÄÐ¡±ø£¬ÑªÁ¿×îµÍ£¬Ã»ÓÐ¹Ì¶¨Ä¿±ê" << endl;
    cout << "2.×ä£º¼ÓÇ¿°æÐ¡±ø£¬ÑªÁ¿Ïà±È±øÓÐÒ»¶¨ÌáÉý" << endl;
    cout << "3.µÐ£º±È×äÔÚÑªÁ¿ºÍÉËº¦ÉÏÓÐÒ»¶¨ÌáÉý£¬»áÖ÷¶¯¿¿½üÍæ¼Ò" << endl;
    cout << "4.Íõ£ºÑªÁ¿ºÍÉËº¦ÓÐ´ó·ùÌá¸ß£¬¿ÉÒÔÏòËÄÖÜ·¢Éä×Óµ¯£¬»áÖ÷¶¯¿¿½üÍæ¼Ò" << endl;
    cout << "5.»Ê£º×îÖÕBoss,ÑªÁ¿ºÍÉËº¦ºÍ¹¥ËÙÓÐ´ó·ùÌá¸ß£¬¿ÉÒÔÏòËÄÖÜ·¢Éä×Óµ¯£¬»áÖ÷¶¯¿¿½üÍæ¼Ò" << endl;
    SetColor(14);
    cout << "ÎäÆ÷½éÉÜ£º" << endl;
    SetColor(7);
    cout << "Ñ©ÏÒ£¬ÈóÔó£¬ÕÛ¾µ£¬Ó¯Ñæ£¬±ÌÃ¢" << endl << "ÏêÏ¸½éÉÜ¿É½øÈëÉÌµê²é¿´" << endl;
    SetColor(1);
    cout << "¼¼ÄÜ½éÉÜ£º" << endl;
    SetColor(7);
    cout << "ÅÚÌ¨£¬»¤¶Ü£¬È«Í¼³å»÷"
        << endl << "ÏêÏ¸½éÉÜ¿É½øÈëÉÌµê²é¿´" << endl;
    SetColor(6);
    cout << "Ä£Ê½½éÉÜ£º" << endl;  SetColor();
    cout << "1.´³¹ØÄ£Ê½£º¸ÃÄ£Ê½ÊÇÓÎÏ·µÄÖ÷ÒªÄ£Ê½£¬Íæ¼ÒÐèÒªÏûÃðÒ»¶¨Á¿µÄµÐÈË²¢ÔÚµÚÎå¹ØÏûÃðBossÒÔ»ñµÃ×îÖÕÊ¤Àû£¬ÏûÃðBossºó¿É½âËøÀ§ÄÑ´³¹ØÄ£Ê½¡£"
        << endl << "2.ÎÞ¾¡Ä£Ê½£ºÍæ¼ÒÐèÒªÔÚÓÐÏÞµÄÉúÃüÖµÏÂÏûÃð¾¡¿ÉÄÜ¶àµÄµÐÈË£¬´Ó¶ø»ñÈ¡½ðÇ®ºÍ»ñµÃ·ÖÊý£¬Ïò×Å¸ü¸ßµÄ·ÖÊý¶øÕ½¶·°É£¡" << endl
        << "3.¶ÔÕ½Ä£Ê½£º¸ÃÄ£Ê½ÊÇÒ»ÖÖ¿ÉÒÔÍ¬Ê±Ö§³ÖÁ½ÃûÍæ¼ÒÔÚÃ»ÓÐ¼¼ÄÜ£¬ÎäÆ÷Ò»ÑùµÄÇé¿öÏÂ½øÐÐ¶ÔÕ½µÄÄ£Ê½¡£" << endl;
    SetColor(10);
    cout << "¶ÔÕ½Ä£Ê½£º" << endl;
    SetColor(7);
    cout << "Íæ¼Ò1 WASD£ºÓÃÓÚ¿ØÖÆ½ÇÉ«ÒÆ¶¯¡£GHJY£ºÓÃÓÚ¿ØÖÆ½ÇÉ«µÄÉä»÷ E£ºÇÐ»»½ÇÉ«×°±¸¡£" << endl
        << "Íæ¼Ò2 ·½Ïò¼ü£ºÓÃÓÚ¿ØÖÆ½ÇÉ«ÒÆ¶¯¡£1235£ºÓÃÓÚ¿ØÖÆ½ÇÉ«µÄÉä»÷ 6£ºÇÐ»»½ÇÉ«×°±¸¡£" << endl;
    cout << "Íæ¼ÒÒ»¿ØÖÆµÄ½ÇÉ«Îª¡°ÎÒ¡±£¬Íæ¼Ò¶þ¿ØÖÆµÄ½ÇÉ«Îª¡°Ëû¡±" << endl;
    SetColor(12);
    cout << "½ÇÉ«ÊôÐÔ½éÉÜ£º" << endl;
    SetColor();
    cout << "Ã¿»÷É±Ò»¸öµÐÈË»á»ñµÃÒ»¶¨½ðÇ®¡¢·ÖÊýÓë¾­ÑéÖµ£¬¾­ÑéÖµµ½´ïÒ»¶¨ÊýÖµ»áÌáÉý½ÇÉ«µÈ¼¶£¬Ã¿ÉýÒ»¼¶½ÇÉ«×î´óÉúÃüÖµ»áÔö¼Ó£¬µÈ¼¶×î¸ßÎª10¼¶" << endl;
    SetColor(11);
    cout << "²¹³äËµÃ÷£º" << endl;  SetColor();
    cout << "1.´òËÀÒ»¸öµÐÈËÓÐ¸ÅÂÊ»áµô³öÒ»¸ö¡°Ò©¡±£¬¼ñÆðËü¿ÉÒÔ»Ø¸´Á½µãÑªÁ¿" << endl;
    cout << "2.×´Ì¬À¸ÏÂ·½µÄÑªÌõ´ú±íÍæ¼ÒÉúÃüÖµ£¬ÔÚbossÕ½ÖÐµØÍ¼ÏÂ·½ÑªÌõ´ú±íbossÉúÃüÖµ£¬¶àÈËÄ£Ê½ÉÏ·½ÑªÌõÎªÍæ¼ÒÒ»ÉúÃüÖµ£¬ÏÂ·½ÑªÌõÎªÍæ¼Ò¶þÉúÃüÖµ" << endl;
    cout << "3.ÔÚÉÌµê¹ºÂò¹ýµÄ¶«Î÷¼Û¸ñ»á±äÎª0£¬¹ºÂòÎäÆ÷»á»»µôµ±Ç°ÕýÔÚÊ¹ÓÃµÄÎäÆ÷" << endl;
    cout << "4.ÔÚ´å×¯µÄÂ·ÉÏÓÐºÜ¶àÐ¡²Ý£¬Çë¾¡Á¿²»Òª²Èµ½ËüÃÇ£¬²Èµ½ÁËËüÃÇ»áËÀµôµÄQAQ" << endl;
    cout << "5.´å×¯µÄÈý¸ö¶´´ÓÉÏÍùÏÂ·Ö±ðÎª ´³¹ØÄ£Ê½ ÎÞ¾¡Ä£Ê½ ¶ÔÕ½Ä£Ê½ ,²»Òª×ß´íÁËÅ¶" << endl;
    SetColor(9); cout << "                                                                                 °´P·µ»Ø±êÌâ"; SetColor();
}

void refreshMapFight(string map[][65], Hole hole[], person& p, Box box[], Fire fire[], Thorn thorn[], Bin b[], Zu z[], Di d[], Wang w[], Huang h[], Medicine medicine[], Battery battery, Buttet buttet[], emenyButtet emenybuttet[], Wave wave[], Laser laser[], PassHole& passHole)
{
    if (passHole.alive == 1)map[passHole.hang][passHole.lie] = "¶´";
    if (battery.alive == 1)map[battery.hang][battery.lie] = "ÅÚ";
    //for (int i = 0; i < Hole::num; ++i) { map[hole[i].hang][hole[i].lie] = "¶´"; }
    for (int i = 0; i < Box::num; ++i) { if (box[i].alive == 1)map[box[i].hang][box[i].lie] = "Ïä"; }
    for (int i = 0; i < Fire::num; ++i) { if(map[fire[i].hang][fire[i].lie]!="³å"&& map[fire[i].hang][fire[i].lie] != "»÷"&& map[fire[i].hang][fire[i].lie] != "²¨"&& map[fire[i].hang][fire[i].lie] != "¹â" && map[fire[i].hang][fire[i].lie] != "µ¯")map[fire[i].hang][fire[i].lie] = "»ð"; }
    for (int i = 0; i < Thorn::num; ++i) { if (map[thorn[i].hang][thorn[i].lie] != "³å" && map[thorn[i].hang][thorn[i].lie] != "»÷" && map[thorn[i].hang][thorn[i].lie] != "²¨" && map[thorn[i].hang][thorn[i].lie] != "¹â" && map[thorn[i].hang][thorn[i].lie] != "µ¯")map[thorn[i].hang][thorn[i].lie] = "´Ì"; }
    for (int i = 0; i < Medicine::num; ++i) { if (medicine[i].alive == 1)map[medicine[i].hang][medicine[i].lie] = "Ò©"; }
    for (int i = 0; i < Bin::num; ++i) { if (b[i].alive == 1)map[b[i].hang][b[i].lie] = "±ø"; }
    for (int i = 0; i < Zu::num; ++i) { if (z[i].alive == 1)map[z[i].hang][z[i].lie] = "×ä"; }
    for (int i = 0; i < Di::num; ++i) { if (d[i].alive == 1)map[d[i].hang][d[i].lie] = "µÐ"; }
    for (int i = 0; i < Wang::num; ++i) { if (w[i].alive == 1)map[w[i].hang][w[i].lie] = "Íõ"; }
    for (int i = 0; i < Huang::num; ++i) { if (h[i].alive == 1)map[h[i].hang][h[i].lie] = "»Ê"; }
    for (int i = 0; i < Buttet::num; ++i) { if (buttet[i].alive == 1)map[buttet[i].hang][buttet[i].lie] = "µ¯"; }
    for (int i = 0; i < emenyButtet::num; ++i) { if (emenybuttet[i].alive == 1)map[emenybuttet[i].hang][emenybuttet[i].lie] = "µ¯"; }

    map[p.hang][p.lie] = "ÎÒ";

}
void refeshMapMultiplayer(string map[][65], person& p, person& p2, Box box[], Fire fire[], Thorn thorn[], Buttet buttet[], Buttet02 buttet02[], Wave wave[], Wave02 wave02[])
{
    for (int i = 0; i < Box::num; ++i) { if (box[i].alive == 1)map[box[i].hang][box[i].lie] = "Ïä"; }
    for (int i = 0; i < Fire::num; ++i) { map[fire[i].hang][fire[i].lie] = "»ð"; }
    for (int i = 0; i < Thorn::num; ++i) { map[thorn[i].hang][thorn[i].lie] = "´Ì"; }
    for (int i = 0; i < Buttet::num; ++i) { if (buttet[i].alive == 1)map[buttet[i].hang][buttet[i].lie] = "µ¯"; }
    for (int i = 0; i < Buttet::num; ++i) { if (buttet02[i].alive == 1)map[buttet02[i].hang][buttet02[i].lie] = "µ¯"; }

    for (int i = 0; i < Wave::num; ++i)
    {
        if (wave[i].alive == 1)
        {
            if (wave[i].dir == 1)
            {
                map[wave[i].hang][wave[i].lie] = "»÷"; if (map[wave[i].hang + 1][wave[i].lie - 1] != "Ç½" && map[wave[i].hang + 1][wave[i].lie - 1] != "Ê¯")map[wave[i].hang + 1][wave[i].lie - 1] = "³å";
                if (map[wave[i].hang + 1][wave[i].lie + 1] != "Ç½" && map[wave[i].hang + 1][wave[i].lie + 1] != "Ê¯")map[wave[i].hang + 1][wave[i].lie + 1] = "²¨";
            }
            if (wave[i].dir == 2)
            {
                map[wave[i].hang][wave[i].lie] = "»÷"; if (map[wave[i].hang - 1][wave[i].lie - 1] != "Ç½" && map[wave[i].hang - 1][wave[i].lie - 1] != "Ê¯")map[wave[i].hang - 1][wave[i].lie - 1] = "³å";
                if (map[wave[i].hang - 1][wave[i].lie + 1] != "Ç½" && map[wave[i].hang - 1][wave[i].lie + 1] != "Ê¯")map[wave[i].hang - 1][wave[i].lie + 1] = "²¨";
            }
            if (wave[i].dir == 3)
            {
                map[wave[i].hang][wave[i].lie] = "»÷"; if (map[wave[i].hang - 1][wave[i].lie + 1] != "Ç½" && map[wave[i].hang - 1][wave[i].lie + 1] != "Ê¯") map[wave[i].hang - 1][wave[i].lie + 1] = "³å";
                if (map[wave[i].hang + 1][wave[i].lie + 1] != "Ç½" && map[wave[i].hang + 1][wave[i].lie + 1] != "Ê¯")map[wave[i].hang + 1][wave[i].lie + 1] = "²¨";
            }
            if (wave[i].dir == 4)
            {
                map[wave[i].hang][wave[i].lie] = "»÷"; if (map[wave[i].hang - 1][wave[i].lie - 1] != "Ç½" && map[wave[i].hang - 1][wave[i].lie - 1] != "Ê¯") map[wave[i].hang - 1][wave[i].lie - 1] = "³å";
                if (map[wave[i].hang + 1][wave[i].lie - 1] != "Ç½" && map[wave[i].hang + 1][wave[i].lie - 1] != "Ê¯")map[wave[i].hang + 1][wave[i].lie - 1] = "²¨";
            }
        }
    }
    for (int i = 0; i < Wave::num; ++i)
    {
        if (wave02[i].alive == 1)
        {
            if (wave02[i].dir == 1)
            {
                map[wave02[i].hang][wave02[i].lie] = "»÷"; if (map[wave02[i].hang + 1][wave02[i].lie - 1] != "Ç½" && map[wave02[i].hang + 1][wave02[i].lie - 1] != "Ê¯")map[wave02[i].hang + 1][wave02[i].lie - 1] = "³å";
                if (map[wave02[i].hang + 1][wave02[i].lie + 1] != "Ç½" && map[wave02[i].hang + 1][wave02[i].lie + 1] != "Ê¯")map[wave02[i].hang + 1][wave02[i].lie + 1] = "²¨";
            }
            if (wave02[i].dir == 2)
            {
                map[wave02[i].hang][wave02[i].lie] = "»÷"; if (map[wave02[i].hang - 1][wave02[i].lie - 1] != "Ç½" && map[wave02[i].hang - 1][wave02[i].lie - 1] != "Ê¯")map[wave02[i].hang - 1][wave02[i].lie - 1] = "³å";
                if (map[wave02[i].hang - 1][wave02[i].lie + 1] != "Ç½" && map[wave02[i].hang - 1][wave02[i].lie + 1] != "Ê¯")map[wave02[i].hang - 1][wave02[i].lie + 1] = "²¨";
            }
            if (wave02[i].dir == 3)
            {
                map[wave02[i].hang][wave02[i].lie] = "»÷"; if (map[wave02[i].hang - 1][wave02[i].lie + 1] != "Ç½" && map[wave02[i].hang - 1][wave02[i].lie + 1] != "Ê¯") map[wave02[i].hang - 1][wave02[i].lie + 1] = "³å";
                if (map[wave02[i].hang + 1][wave02[i].lie + 1] != "Ç½" && map[wave02[i].hang + 1][wave02[i].lie + 1] != "Ê¯")map[wave02[i].hang + 1][wave02[i].lie + 1] = "²¨";
            }
            if (wave02[i].dir == 4)
            {
                map[wave02[i].hang][wave02[i].lie] = "»÷"; if (map[wave02[i].hang - 1][wave02[i].lie - 1] != "Ç½" && map[wave02[i].hang - 1][wave02[i].lie - 1] != "Ê¯") map[wave02[i].hang - 1][wave02[i].lie - 1] = "³å";
                if (map[wave02[i].hang + 1][wave02[i].lie - 1] != "Ç½" && map[wave02[i].hang + 1][wave02[i].lie - 1] != "Ê¯")map[wave02[i].hang + 1][wave02[i].lie - 1] = "²¨";
            }
        }
    }
    map[p.hang][p.lie] = "ÎÒ";
    map[p2.hang][p2.lie] = "Ëû";
}
void refeshMapShop(string mapShop[][65], person* p, Door* door, Buy buy[])
{
    for (int i = 0; i < 8; i++) { mapShop[buy[i].hang][buy[i].lie] = "Âò"; }
    mapShop[p->hang][p->lie] = "ÎÒ";
    mapShop[door[1].hang][door[1].lie] = "ÃÅ";
}
void refeshMap(string mapStart[][65], startHole StartHole[], person* p, Door* door)
{
    mapStart[p->hang][p->lie] = "ÎÒ";
    mapStart[door[0].hang][door[0].lie] = "ÃÅ";
    for (int i = 0; i < 3; i++)
    {
        mapStart[StartHole[i].hang][StartHole[i].lie] = "¶´";
    }
}